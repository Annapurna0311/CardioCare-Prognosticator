# -*- coding: utf-8 -*-
"""TecHacks Heart Failure Prediction System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tk9TFblNQtErparlT5yGL7Iiv_8hsgvE
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy as sc
import sklearn as sk
import seaborn as sns

"""**DATA ACQUISTION**"""

df_fhs = pd.read_csv("/content/heart_disease_uci.csv")

df_fhs.head()

df_fhs.info()

pd.set_option('display.float_format', lambda x: '%.3f' % x)
df_fhs.describe().transpose()

"""2. **Filtering Dataset**"""

df_fhs = df_fhs.drop(['num'], axis=1)

df_fhs.shape

df_fhs.isnull()

df_fhs.isnull().sum()

df_fhs.isnull().sum()/len(df_fhs)*100

import missingno as mano

mano.bar(df_fhs)
plt.show()

mano.matrix(df_fhs)
plt.show()

import missingno as mano
mano.heatmap(df_fhs)
plt.show()

df_fhs['ca'] = df_fhs['ca'].fillna(df_fhs['ca'].mean())

(df_fhs.isnull().sum()*100/len(df_fhs))

df_fhs=df_fhs.dropna()

(df_fhs.isnull().sum() * 100) / len(df_fhs)

df_fhs.duplicated().sum()

df_fhs.info()

df_fhs['slope'].unique()

df_fhs['slope'].value_counts(normalize=True)

df_fhs['slope']=df_fhs['slope'].replace(['downsloping', 'flat', 'upsloping'],[1,2,3])

df_fhs['thal'].unique()

df_fhs['thal']=df_fhs['thal'].replace(['fixed defect', 'normal', 'reversable defect'],[1,2,3])

pd.get_dummies(df_fhs['slope'])

df_fhs['slope'].unique()

age_bins = [-float('inf'), 25, 40, 55, 70, float('inf')]
age_labels = ['25', '26 40', '41 55', '56 70', ' 70']

df_fhs['age_new'] = pd.cut(df_fhs['age_new'], bins=age_bins, labels=age_labels, right=False)

df_fhs['age_group'] = df_fhs['age_new'].replace(['26 40', '41 55', '56 70', ' 70', ' 25'],
                                            ['young_adults', 'adults', 'middle aged', 'old', 'youth'])

df_fhs['age_group'].value_counts()

df_fhs['age_group'].value_counts().plot(kind='bar')

pd.get_dummies(df_fhs['age_group'])

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df_fhs['sex'].value_counts()

df_fhs['cp'].value_counts(normalize=True)

df_fhs['cp'].value_counts(normalize=True).plot(kind='bar')

df_fhs.groupby('sex').mean()

sns.catplot(data=df_fhs,y='cp',x='sex',kind='bar')
plt.show()

plt.figure(figsize=(12, 7))
sns.scatterplot(data=df_fhs, y='trestbps', x='chol',hue='cp')
plt.show()

plt.figure(figsize=(12, 7))
sns.scatterplot(data=df_fhs, y='trestbps', x='chol')
plt.show()

fhs_cat = df_fhs.select_dtypes(include=['category'])
fhs_cat.info()

df_fhs.nunique().sort_values()

col_int = df_fhs.nunique().reset_index()
col_int.columns = ['features', 'categories']
col_int['categories'] = col_int['categories'].astype('int64')
col_int = col_int.sort_values(by='categories')
col_int = col_int[col_int.categories < 10]
col_int['features'].values

fhs_cat.nunique().sort_values()

df_fhs.nunique().sort_values()

col_int=df_fhs.nunique().reset_index()
col_int

col_int.columns=['features','categories']
col_int['categories']=col_int['categories'].astype('int64')

col_int=col_int.sort_values(by='categories')
col_int=col_int[col_int.categories<10]
col_int.features.values

fhs_catt=df_fhs[col_int.features.values]
fhs_cat

sns.countplot(data=fhs_cat,x='age_group')

plt.figure(figsize=(30, 20))
for i, col in enumerate(df_fhs.select_dtypes(include='category').columns):
    plt.subplot(3, 5, i + 1)
    sns.countplot(x=col, hue='cp', data=df_fhs)

plt.show()

import matplotlib.pyplot as plt

fhs_cont=df_fhs.select_dtypes(include=['float'])
fhs_cont.info()

plt.figure(figsize=(20, 10))
fhs_cont.boxplot(grid=False)
plt.show()

g=sns.FacetGrid(df_fhs, row='sex',col='age_group')
g.map(sns.histplot,'cp')
plt.show()

g=sns.FacetGrid(df_fhs,hue='cp',col='age_group',height=2)
g.map(sns.scatterplot,"trestbps","chol")
plt.show()

fhs_cont.corr()

plt.figure(figsize=(12,7))
sns.heatmap(fhs_cont.corr())
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(20, 10))
fhs_cont.boxplot(grid=False)
plt.show()

g=sns.FacetGrid(df_fhs,row="sex",col='age_group')
g.map(sns.histplot,'cp')
plt.show()

g=sns.FacetGrid(df_fhs,hue='cp',col='age_group',height=2)
g.map(sns.scatterplot,"trestbps","chol")
plt.show()

fig,ax=plt.subplots(figsize=(15,10))
sns.boxplot(data=df_fhs,x="age_group",y="chol",ax=ax)
plt.show()

plt.figure(figsize=(30,20))
for i in enumerate(fhs_cont.columns):
  plt.subplot(6,4,i[0]+1)
  sns.boxplot(x=i[1],data=fhs_cont)
plt.tight_layout()

df_fhs['cp'].value_counts(normalize=True)

import matplotlib.pyplot as plt

plt.figure(figsize=(20, 10))
fhs_cont.boxplot(grid=False)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 7))
df_fhs['cp'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Distribution of Chest Pain Types')
plt.show()

X = df_fhs.drop(columns='chol', axis=1)
Y = df_fhs['chol']

print(X)

from sklearn.model_selection import train_test_split
import numpy as np
mask = ~np.isnan(Y)
X = X[mask]
Y = Y[mask]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

from sklearn.svm import SVC

df_fhs.rename(columns={'age': 'age_new'}, inplace=False)

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Assuming X and y are your features and target variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the SVM model
svm_model = SVC()

svm_model.fit(X_train, y_train)


# Make predictions on the test set
y_pred = svm_model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')